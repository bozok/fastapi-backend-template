services:
  # FastAPI Application
  app:
    build: .
    container_name: fastapi-app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-fastapi_user}:${POSTGRES_PASSWORD:-fastapi_password}@postgres:5432/${POSTGRES_DB:-fastapi_db}
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - ENABLE_RATE_LIMITING=${ENABLE_RATE_LIMITING:-true}
      - SECRET_KEY=${SECRET_KEY:-super-secret-development-key-change-in-production}
      - PROJECT_NAME=${PROJECT_NAME:-FastAPI Clean Project}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-["http://localhost:3000","http://localhost:8080"]}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - ALGORITHM=${ALGORITHM:-HS256}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app # Mount for development hot reload
      - ./alembic:/app/alembic # Mount for migration files sync
      - ./tests:/app/tests # Mount for tests sync
    networks:
      - fastapi-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: fastapi-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-fastapi_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-fastapi_password}
      - POSTGRES_DB=${POSTGRES_DB:-fastapi_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql # Optional init script
    networks:
      - fastapi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fastapi_user -d fastapi_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache/Session Store
  redis:
    image: redis:7-alpine
    container_name: fastapi-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fastapi-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: fastapi-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-admin}
      - PGADMIN_LISTEN_PORT=80
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - fastapi-network
    restart: unless-stopped

# Persistent volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

# Custom network
networks:
  fastapi-network:
    driver: bridge
